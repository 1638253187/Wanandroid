package com.example.windqq.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.windqq.bean.DaoMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "messages".
*/
public class DaoMsgDao extends AbstractDao<DaoMsg, Long> {

    public static final String TABLENAME = "messages";

    /**
     * Properties of entity DaoMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Fromuser = new Property(2, String.class, "fromuser", false, "FROMUSER");
        public final static Property Touser = new Property(3, String.class, "touser", false, "TOUSER");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Deriction = new Property(5, int.class, "deriction", false, "DERICTION");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
    }


    public DaoMsgDao(DaoConfig config) {
        super(config);
    }
    
    public DaoMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"messages\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"FROMUSER\" TEXT," + // 2: fromuser
                "\"TOUSER\" TEXT," + // 3: touser
                "\"NAME\" TEXT," + // 4: name
                "\"DERICTION\" INTEGER NOT NULL ," + // 5: deriction
                "\"CONTENT\" TEXT);"); // 6: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"messages\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DaoMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
 
        String fromuser = entity.getFromuser();
        if (fromuser != null) {
            stmt.bindString(3, fromuser);
        }
 
        String touser = entity.getTouser();
        if (touser != null) {
            stmt.bindString(4, touser);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getDeriction());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DaoMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
 
        String fromuser = entity.getFromuser();
        if (fromuser != null) {
            stmt.bindString(3, fromuser);
        }
 
        String touser = entity.getTouser();
        if (touser != null) {
            stmt.bindString(4, touser);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getDeriction());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DaoMsg readEntity(Cursor cursor, int offset) {
        DaoMsg entity = new DaoMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fromuser
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // touser
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5), // deriction
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DaoMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setFromuser(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTouser(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeriction(cursor.getInt(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DaoMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DaoMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DaoMsg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
